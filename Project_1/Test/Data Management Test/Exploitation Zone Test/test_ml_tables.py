import unittest
from unittest.mock import patch, MagicMock
from pathlib import Path
from delta import configure_spark_with_delta_pip
from pyspark.sql import SparkSession, DataFrame

import os
import sys
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '../../../Python/Data_Management/Exploitation_Zone')))
from ml_tables import ( # type: ignore
    ml_tag_join_table,
    ml_movie_and_ml_tag_join_table,
    ml_movie_tables
)

class TestMlTables(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        builder = (
        SparkSession.builder
        .master("local[1]")
        .appName("TestMlTables")
        .config("spark.sql.extensions", "io.delta.sql.DeltaSparkSessionExtension")
        .config("spark.sql.catalog.spark_catalog", "org.apache.spark.sql.delta.catalog.DeltaCatalog")
        )
        cls.spark = configure_spark_with_delta_pip(builder).getOrCreate()

    @classmethod
    def tearDownClass(cls):
        cls.spark.stop()


    def test_ml_tag_join_table(self):
        mock_genome_scores_df = self.spark.createDataFrame(
            [(1, 1), (1, 2), (1, 3)],
            ["movieId", "tagId"]
        )
        mock_genome_tags_df = self.spark.createDataFrame(
            [(1, "tag1"), (2, "tag2"), (3, "tag3")],
            ["tagId", "tag"]
        )
        result_df = ml_tag_join_table(mock_genome_scores_df, mock_genome_tags_df)
        expected_data = [(1, ["tag1", "tag2", "tag3"])]
        expected_df = self.spark.createDataFrame(expected_data, ["movieId", "tags"])
        self.assertEqual(result_df.count(), expected_df.count())
        self.assertEqual(set(result_df.columns), set(expected_df.columns))
        self.assertEqual(result_df.select("tags").first(), expected_df.select("tags").first())


    def test_ml_movie_and_ml_tag_join_table(self):
        mock_movie_df = self.spark.createDataFrame(
            [(1, "Movie A"), (2, "Movie B")],
            ["movieId", "title"]
        )
        mock_tag_df = self.spark.createDataFrame(
            [(1, ["tag1", "tag2"]), (2, ["tag3"])],
            ["movieId", "tags"]
        )
        result_df = ml_movie_and_ml_tag_join_table(mock_movie_df, mock_tag_df)
        expected_data = [(1, "Movie A", ["tag1", "tag2"]), (2, "Movie B", ["tag3"])]
        expected_df = self.spark.createDataFrame(expected_data, ["movieId", "title", "tags"])
        self.assertEqual(result_df.count(), expected_df.count())
        self.assertEqual(set(result_df.columns), set(expected_df.columns))
        self.assertEqual(result_df.select("title").first(), expected_df.select("title").first())
        
    
    @patch('ml_tables.ml_movie_and_ml_tag_join_table')
    @patch('ml_tables.ml_tag_join_table')
    @patch('ml_tables.load_delta_tables')
    def test_ml_movie_tables(self, 
                             mock_load_delta_tables, 
                             mock_ml_tag_join_table, 
                             mock_ml_movie_and_ml_tag_join_table):
        # Create mock DataFrames
        mock_genome_scores_df = MagicMock(spec=DataFrame)
        mock_genome_tags_df = MagicMock(spec=DataFrame)
        mock_movie_df = MagicMock(spec=DataFrame)
        mock_rating_df = MagicMock(spec=DataFrame)
        mock_tag_df = MagicMock(spec=DataFrame)

        # Prepare mock for load_delta_tables to return the above DataFrames
        mock_load_delta_tables.return_value = {
            'ml-20m_genome_scores': mock_genome_scores_df,
            'ml-20m_genome_tags': mock_genome_tags_df,
            'ml-20m_movie': mock_movie_df,
            'ml-20m_rating': mock_rating_df,
            'ml-20m_tag': mock_tag_df
        }

        # Prepare mock for ml_tag_join_table
        mock_tag_join_result = MagicMock(spec=DataFrame)
        mock_ml_tag_join_table.return_value = mock_tag_join_result
        # Prepare mock for ml_movie_and_ml_tag_join_table
        mock_movie_join_result = MagicMock(spec=DataFrame)
        mock_ml_movie_and_ml_tag_join_table.return_value = mock_movie_join_result
        # Call the function under test
        ml_movie_tables(self.spark, 
                        ml_movie_delta_path='mock/path/to/ml-20m/', 
                        exploitation_zone_base='mock/path/to/exploitation_zone/')
        # Assertions
        mock_load_delta_tables.assert_called_once_with('mock/path/to/ml-20m/', self.spark)
        mock_ml_tag_join_table.assert_called_once_with(mock_genome_scores_df, mock_genome_tags_df)
        mock_ml_movie_and_ml_tag_join_table.assert_called_once_with(mock_movie_df, mock_tag_join_result)
        
        self.assertTrue(mock_movie_join_result.write.format().mode().save.called)
        self.assertTrue(mock_rating_df.write.format().mode().save.called)
        self.assertTrue(mock_tag_df.write.format().mode().save.called)


if __name__ == '__main__':
    unittest.main()


