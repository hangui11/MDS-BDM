services:
  spark-delta:
    image: apache/spark-py:latest
    container_name: spark-delta
    ports:
      - "4040:4040"  # Spark web UI
    environment:
      - SPARK_HOME=/opt/spark
      - PYTHONPATH=/opt/spark/python:/opt/spark/python/lib/py4j-0.10.9.5-src.zip
      - PYSPARK_PYTHON=/usr/local/bin/python
      - PYSPARK_DRIVER_PYTHON=/usr/local/bin/python
      - JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64
    volumes:
      - ./data:/opt/spark/data
      - ./scripts:/opt/spark/scripts
    networks:
      - airflow-network
    command: tail -f /dev/null
    
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - airflow-network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
    networks:
      - airflow-network

  kafka2:
    image: confluentinc/cp-kafka:latest
    container_name: kafka2
    depends_on:
      - zookeeper
    ports:
      - "9094:9094"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka2:29094,EXTERNAL://localhost:9094
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
    networks:
      - airflow-network

  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - airflow-network

  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    networks:
      - airflow-network

  airflow-webserver:
    build: .
    container_name: airflow-webserver
    depends_on:
      - postgres
      - spark-delta
      - kafka
    environment:
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__WEBSERVER__SECRET_KEY: my_secret_key
      AIRFLOW__WEBSERVER__RBAC: 'True'
      AIRFLOW__CORE__DAGS_FOLDER: /opt/Project_1/dags
      AIRFLOW_CONN_SPARK_DEFAULT: 'spark://spark-delta:7077'
      KAFKA_HOST: kafka:9092
      SPARK_HOME: /opt/airflow/spark
      PYTHONPATH: ${PYTHONPATH}:/opt/airflow/spark/python:/opt/airflow/spark/python/lib/py4j-0.10.9.5-src.zip
      JAVA_HOME: /usr/lib/jvm/default-java
    volumes:
      - ../Project_1:/opt/Project_1
      - ./airflow-logs-volume:/opt/airflow/logs
    ports:
      - "8080:8080"
    command: >
      bash -c "
        airflow db init &&
        airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com &&
        airflow webserver"
    restart: always
    networks:
      - airflow-network

  airflow-scheduler:
    build: .
    container_name: airflow-scheduler
    depends_on:
      - airflow-webserver
      - postgres
      - spark-delta
      - kafka
    environment:
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__WEBSERVER__SECRET_KEY: my_secret_key
      AIRFLOW__CORE__DAGS_FOLDER: /opt/Project_1/dags
      AIRFLOW_CONN_SPARK_DEFAULT: 'spark://spark-delta:7077'
      KAFKA_HOST: kafka:9092
      SPARK_HOME: /opt/airflow/spark
      PYTHONPATH: ${PYTHONPATH}:/opt/airflow/spark/python:/opt/airflow/spark/python/lib/py4j-0.10.9.5-src.zip
      JAVA_HOME: /usr/lib/jvm/default-java
    volumes:
      - ../Project_1:/opt/Project_1
      - ./airflow-logs-volume:/opt/airflow/logs
    command: >
      bash -c "
        airflow scheduler"
    restart: always
    networks:
      - airflow-network

volumes:
  postgres-db-volume:

networks:
  airflow-network:
    driver: bridge